// deploy.js - TimelockVault deployment functionality

// TimelockVault constructor ABI for deployment
const TIMELOCK_VAULT_BYTECODE = `0x6080604052600160055534801562000015575f80fd5b50604051620041303803806200413083398181016040528101906200003b919062000686565b8484845f620000535f801b306200030b60201b60201c565b505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146200009e576200009c5f801b826200030b60201b60201c565b505b5f5b83518110156200015e57620000f97fb09aa5aeb3702cfd50b6b62bc4532604938f21248a27a1d5ca736082b6819cc1858381518110620000e557620000e462000786565b5b60200260200101516200030b60201b60201c565b50620001497ffd643c72710c63c0180259aba6b2d05451e3591a24e58b62239378085726f78385838151811062000135576200013462000786565b5b60200260200101516200030b60201b60201c565b50806200015690620007e0565b9050620000a0565b505f5b8251811015620001cf57620001ba7fd8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e63848381518110620001a657620001a562000786565b5b60200260200101516200030b60201b60201c565b5080620001c790620007e0565b905062000161565b50836002819055507f11c24f4ead16507c69ac467fbd5e4eed5fb5c699626d2cc6d66421df253886d55f856040516200020a92919062000887565b60405180910390a15050505060016003819055505f5b82518110156200028e57620002797f4746564804bd7a186b8bfdeb9be995ecc0d29aef98ac17c5bdb32aea71228e8c84838151811062000265576200026462000786565b5b60200260200101516200030b60201b60201c565b50806200028690620007e0565b905062000220565b505f5b8151811015620002ff57620002ea7fb3e25b5404b87e5a838579cb5d7481d61ad96ee284d38ec1e97c07ba64e7f6fc838381518110620002d657620002d562000786565b5b60200260200101516200030b60201b60201c565b5080620002f790620007e0565b905062000291565b505050505050620008b2565b5f6200031e83836200040660201b60201c565b620003fc5760015f808581526020019081526020015f205f015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff021916908315150217905550620003986200046960201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a46001905062000400565b5f90505b92915050565b5f805f8481526020019081526020015f205f015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16905092915050565b5f33905090565b5f604051905090565b5f80fd5b5f80fd5b5f819050919050565b620004958162000481565b8114620004a0575f80fd5b50565b5f81519050620004b3816200048a565b92915050565b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6200050582620004bd565b810181811067ffffffffffffffff82111715620005275762000526620004cd565b5b80604052505050565b5f6200053b62000470565b9050620005498282620004fa565b919050565b5f67ffffffffffffffff8211156200056b576200056a620004cd565b5b602082029050602081019050919050565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f620005ab8262000580565b9050919050565b620005bd816200059f565b8114620005c8575f80fd5b50565b5f81519050620005db81620005b2565b92915050565b5f620005f7620005f1846200054e565b62000530565b905080838252602082019050602084028301858111156200061d576200061c6200057c565b5b835b818110156200064a5780620006358882620005cb565b8452602084019350506020810190506200061f565b5050509392505050565b5f82601f8301126200066b576200066a620004b9565b5b81516200067d848260208601620005e1565b91505092915050565b5f805f805f60a08688031215620006a257620006a162000479565b5b5f620006b188828901620004a3565b955050602086015167ffffffffffffffff811115620006d557620006d46200047d565b5b620006e38882890162000654565b945050604086015167ffffffffffffffff8111156200070757620007066200047d565b5b620007158882890162000654565b935050606086015167ffffffffffffffff8111156200073957620007386200047d565b5b620007478882890162000654565b925050608086015167ffffffffffffffff8111156200076b576200076a6200047d565b5b620007798882890162000654565b9150509295509295909350565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f620007ec8262000481565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203620008215762000820620007b3565b5b600182019050919050565b5f819050919050565b5f819050919050565b5f6200085e6200085862000852846200082c565b62000835565b62000481565b9050919050565b62000870816200083e565b82525050565b620008818162000481565b82525050565b5f6040820190506200089c5f83018562000865565b620008ab602083018462000876565b9392505050565b61387080620008c05f395ff3fe608060405260043610610228575f3560e01c80637958004c11610122578063b9a9b383116100aa578063d547741f1161006e578063d547741f14610835578063e38335e51461085d578063f23a6e6114610879578063f27a0c92146108b5578063f5bc2fdc146108df5761022f565b8063b9a9b38314610755578063bc197c811461077f578063c4d252f5146107bb578063d45214da146107e3578063d45c4435146107f95761022f565b806391d14854116100f157806391d148541461065f578063a217fddf1461069b578063acf1c948146106c5578063b08e51c0146106ef578063b1c5f427146107195761022f565b80637958004c146105955780638065657f146105d15780638f2a0bb01461060d5780638f61f4f5146106355761022f565b80632ab0f529116101b057806337d89a181161017457806337d89a18146104c957806338e5b7ae1461050557806354aa61d01461051b578063584b153e1461053157806364d623531461056d5761022f565b80632ab0f529146103d75780632f2ff15d146104135780633009a2101461043b57806331d507501461046557806336568abe146104a15761022f565b806307bd0265116101f757806307bd0265146102dd578063134008d31461030757806313bc9f2014610323578063150b7a021461035f578063248a9ca31461039b5761022f565b806301d5062a1461023357806301ffc9a71461025b57806305a8d04d1461029757806307a00b1f146102b35761022f565b3661022f57005b5f80fd5b34801561023e575f80fd5b5061025960048036038101906102549190612580565b6108fb565b005b348015610266575f80fd5b50610281600480360381019061027c919061267f565b6109ae565b60405161028e91906126c4565b60405180910390f35b6102b160048036038101906102ac91906126dd565b6109bf565b005b3480156102be575f80fd5b506102c7610aea565b6040516102d491906126c4565b60405180910390f35b3480156102e8575f80fd5b506102f1610afc565b6040516102fe919061275d565b60405180910390f35b610321600480360381019061031c9190612776565b610b20565b005b34801561032e575f80fd5b506103496004803603810190610344919061280c565b610b7c565b60405161035691906126c4565b60405180910390f35b34801561036a575f80fd5b506103856004803603810190610380919061296f565b610bb4565b60405161039291906129fe565b60405180910390f35b3480156103a6575f80fd5b506103c160048036038101906103bc919061280c565b610bc7565b6040516103ce919061275d565b60405180910390f35b3480156103e2575f80fd5b506103fd60048036038101906103f8919061280c565b610be3565b60405161040a91906126c4565b60405180910390f35b34801561041e575f80fd5b5061043960048036038101906104349190612a17565b610c1a565b005b348015610446575f80fd5b5061044f610c3c565b60405161045c9190612a64565b60405180910390f35b348015610470575f80fd5b5061048b6004803603810190610486919061280c565b610c42565b60405161049891906126c4565b60405180910390f35b3480156104ac575f80fd5b506104c760048036038101906104c29190612a17565b610c7a565b005b3480156104d4575f80fd5b506104ef60048036038101906104ea919061280c565b610cf5565b6040516104fc9190612a64565b60405180910390f35b348015610510575f80fd5b50610519610d0f565b005b348015610526575f80fd5b5061052f610e2a565b005b34801561053c575f80fd5b506105576004803603810190610552919061280c565b610f07565b60405161056491906126c4565b60405180910390f35b348015610578575f80fd5b50610593600480360381019061058e9190612a7d565b610f73565b005b3480156105a0575f80fd5b506105bb60048036038101906105b6919061280c565b611034565b6040516105c89190612b1b565b60405180910390f35b3480156105dc575f80fd5b506105f760048036038101906105f29190612776565b6110d2565b604051610604919061275d565b60405180910390f35b348015610618575f80fd5b50610633600480360381019061062e9190612c33565b611110565b005b348015610640575f80fd5b506106496111c9565b604051610656919061275d565b60405180910390f35b34801561066a575f80fd5b5061068560048036038101906106809190612a17565b6111ed565b60405161069291906126c4565b60405180910390f35b3480156106a6575f80fd5b506106af611250565b6040516106bc919061275d565b60405180910390f35b3480156106d0575f80fd5b506106d9611256565b6040516106e6919061275d565b60405180910390f35b3480156106fa575f80fd5b5061070361127a565b604051610710919061275d565b60405180910390f35b348015610724575f80fd5b5061073f600480360381019061073a9190612d1c565b61129e565b60405161074c919061275d565b60405180910390f35b348015610760575f80fd5b506107696112e2565b604051610776919061275d565b60405180910390f35b34801561078a575f80fd5b506107a560048036038101906107a09190612eb3565b611306565b6040516107b291906129fe565b60405180910390f35b3480156107c6575f80fd5b506107e160048036038101906107dc919061280c565b61131a565b005b3480156107ee575f80fd5b506107f76113e9565b005b348015610804575f80fd5b5061081f600480360381019061081a919061280c565b611502565b60405161082c9190612a64565b60405180910390f35b348015610840575f80fd5b5061085b60048036038101906108569190612a17565b61151c565b005b61087760048036038101906108729190612d1c565b61153e565b005b348015610884575f80fd5b5061089f600480360381019061089a9190612f7e565b61159e565b6040516108ac91906129fe565b60405180910390f35b3480156108c0575f80fd5b506108c96115b2565b6040516108d69190612a64565b60405180910390f35b6108f960048036038101906108f49190613011565b6115bb565b005b7fb09aa5aeb3702cfd50b6b62bc4532604938f21248a27a1d5ca736082b6819cc16109258161185d565b60045f9054906101000a900460ff161561096b576040517faeff925300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f61097a8989898989896110d2565b905060055460065f8381526020019081526020015f20819055506109a389898989898989611871565b505050505050505050565b5f6109b882611946565b9050919050565b60045f9054906101000a900460ff16610a04576040517fdc7b454300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610a2e7fb3e25b5404b87e5a838579cb5d7481d61ad96ee284d38ec1e97c07ba64e7f6fc336111ed565b610a6f57336040517f621b37f9000000000000000000000000000000000000000000000000000000008152600401610a6691906130d0565b60405180910390fd5b610a7b848484846119bf565b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f4cc130c913677993be0b3c8aef7896fdc5697f94ff332d5138d3f6b6aef4858b858585604051610adc93929190613125565b60405180910390a350505050565b60045f9054906101000a900460ff1681565b7fd8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e6381565b60045f9054906101000a900460ff1615610b66576040517faeff925300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610b74868686868686611a40565b505050505050565b5f60026003811115610b9157610b90612aa8565b5b610b9a83611034565b6003811115610bac57610bab612aa8565b5b149050919050565b5f63150b7a0260e01b9050949350505050565b5f805f8381526020019081526020015f20600101549050919050565b5f600380811115610bf757610bf6612aa8565b5b610c0083611034565b6003811115610c1257610c11612aa8565b5b149050919050565b610c2382610bc7565b610c2c8161185d565b610c368383611afa565b50505050565b60055481565b5f806003811115610c5657610c55612aa8565b5b610c5f83611034565b6003811115610c7157610c70612aa8565b5b14159050919050565b610c82611be3565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610ce6576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610cf08282611bea565b505050565b5f60065f8381526020019081526020015f20549050919050565b60045f9054906101000a900460ff16610d54576040517fdc7b454300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610d7e7fb3e25b5404b87e5a838579cb5d7481d61ad96ee284d38ec1e97c07ba64e7f6fc336111ed565b610dbf57336040517f621b37f9000000000000000000000000000000000000000000000000000000008152600401610db691906130d0565b60405180910390fd5b5f60045f6101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff167fe8d6e78429d9b93828a8ca23917c0b73b473f3e4be3f85fc340064c2a880a3a8600554604051610e209190612a64565b60405180910390a2565b7f4746564804bd7a186b8bfdeb9be995ecc0d29aef98ac17c5bdb32aea71228e8c610e548161185d565b60045f9054906101000a900460ff1615610e9a576040517faeff925300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160045f6101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff167f78d68bfa368ae8e561b192d9c48ca66765c18a5f0bab3e94539d296c52684041600554604051610efc9190612a64565b60405180910390a250565b5f80610f1283611034565b905060016003811115610f2857610f27612aa8565b5b816003811115610f3b57610f3a612aa8565b5b1480610f6b575060026003811115610f5657610f55612aa8565b5b816003811115610f6957610f68612aa8565b5b145b915050919050565b5f610f7c611be3565b90503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610fee57806040517fe2850c59000000000000000000000000000000000000000000000000000000008152600401610fe591906130d0565b60405180910390fd5b7f11c24f4ead16507c69ac467fbd5e4eed5fb5c699626d2cc6d66421df253886d560025483604051611021929190613155565b60405180910390a1816002819055505050565b5f8061103f83611cd3565b905060038081111561105457611053612aa8565b5b81600381111561106757611066612aa8565b5b148061109657505f600381111561108157611080612aa8565b5b81600381111561109457611093612aa8565b5b145b156110a457809150506110cd565b60055460065f8581526020019081526020015f205410156110c8575f9150506110cd565b809150505b919050565b5f8686868686866040516020016110ee9695949392919061317c565b6040516020818303038152906040528051906020012090509695505050505050565b7fb09aa5aeb3702cfd50b6b62bc4532604938f21248a27a1d5ca736082b6819cc161113a8161185d565b60045f9054906101000a900460ff1615611180576040517faeff925300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f6111918b8b8b8b8b8b8b8b61129e565b905060055460065f8381526020019081526020015f20819055506111bc8b8b8b8b8b8b8b8b8b611d1f565b5050505050505050505050565b7fb09aa5aeb3702cfd50b6b62bc4532604938f21248a27a1d5ca736082b6819cc181565b5f805f8481526020019081526020015f205f015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16905092915050565b5f801b81565b7fb3e25b5404b87e5a838579cb5d7481d61ad96ee284d38ec1e97c07ba64e7f6fc81565b7ffd643c72710c63c0180259aba6b2d05451e3591a24e58b62239378085726f78381565b5f88888888888888886040516020016112be989796959493929190613462565b60405160208183030381529060405280519060200120905098975050505050505050565b7f4746564804bd7a186b8bfdeb9be995ecc0d29aef98ac17c5bdb32aea71228e8c81565b5f63bc197c8160e01b905095945050505050565b7ffd643c72710c63c0180259aba6b2d05451e3591a24e58b62239378085726f7836113448161185d565b61134d82610f07565b6113a4578161135c6002611ee4565b6113666001611ee4565b176040517f5ead8eb500000000000000000000000000000000000000000000000000000000815260040161139b9291906134ce565b60405180910390fd5b60015f8381526020019081526020015f205f9055817fbaa1eb22f2a492ba1a5fea61b8df4d27c6c8b5f3971e63bb58fa14ff72eedb7060405160405180910390a25050565b60045f9054906101000a900460ff1661142e576040517fdc7b454300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6114587fb3e25b5404b87e5a838579cb5d7481d61ad96ee284d38ec1e97c07ba64e7f6fc336111ed565b61149957336040517f621b37f900000000000000000000000000000000000000000000000000000000815260040161149091906130d0565b60405180910390fd5b60055f8154809291906114ab90613522565b91905055503373ffffffffffffffffffffffffffffffffffffffff167f847499a112bc30488b9edc438eab83ef67c80d0790d6c4a0da91fd373952e6c36005546040516114f89190612a64565b60405180910390a2565b5f60015f8381526020019081526020015f20549050919050565b61152582610bc7565b61152e8161185d565b6115388383611bea565b50505050565b60045f9054906101000a900460ff1615611584576040517faeff925300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6115948888888888888888611f08565b5050505050505050565b5f63f23a6e6160e01b905095945050505050565b5f600254905090565b60045f9054906101000a900460ff16611600576040517fdc7b454300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61162a7fb3e25b5404b87e5a838579cb5d7481d61ad96ee284d38ec1e97c07ba64e7f6fc336111ed565b61166b57336040517f621b37f900000000000000000000000000000000000000000000000000000000815260040161166291906130d0565b60405180910390fd5b8383905086869050146116b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116aa906135e9565b60405180910390fd5b8181905086869050146116fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116f2906135e9565b60405180910390fd5b5f5b868690508110156118545761177787878381811061171e5761171d613607565b5b90506020020160208101906117339190613634565b86868481811061174657611745613607565b5b905060200201358585858181106117605761175f613607565b5b9050602002810190611772919061366b565b6119bf565b86868281811061178a57611789613607565b5b905060200201602081019061179f9190613634565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f4cc130c913677993be0b3c8aef7896fdc5697f94ff332d5138d3f6b6aef4858b878785818110611800576117ff613607565b5b9050602002013586868681811061181a57611819613607565b5b905060200281019061182c919061366b565b60405161183b93929190613125565b60405180910390a38061184d90613522565b90506116fd565b50505050505050565b61186e81611869611be3565b6120c6565b50565b7fb09aa5aeb3702cfd50b6b62bc4532604938f21248a27a1d5ca736082b6819cc161189b8161185d565b5f6118aa8989898989896110d2565b90506118b68184612117565b5f817f4cf4410cc57040e44862ef0f45f3dd5a5e02db8eb8add648d4b0e236f1d07dca8b8b8b8b8b8a6040516118f1969594939291906136cd565b60405180910390a35f801b841461193b57807f20fda5fd27a1ea7bf5b9567f143ac5470bb059374a27e8f67cb44f946f6d038785604051611932919061275d565b60405180910390a25b505050505050505050565b5f7f4e2312e0000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806119b857506119b7826121e4565b5b9050919050565b5f808573ffffffffffffffffffffffffffffffffffffffff168585856040516119e9929190613755565b5f6040518083038185875af1925050503d805f8114611a23576040519150601f19603f3d011682016040523d82523d5f602084013e611a28565b606091505b5091509150611a37828261225d565b50505050505050565b7fd8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e63611a6b815f6111ed565b611a8157611a8081611a7b611be3565b6120c6565b5b5f611a908888888888886110d2565b9050611a9c8185612281565b611aa8888888886119bf565b5f817fc2617efa69bab66782fa219543714338489c4e9e178271560a91b82c3f612b588a8a8a8a604051611adf949392919061376d565b60405180910390a3611af081612334565b5050505050505050565b5f611b0583836111ed565b611bd95760015f808581526020019081526020015f205f015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff021916908315150217905550611b76611be3565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a460019050611bdd565b5f90505b92915050565b5f33905090565b5f611bf583836111ed565b15611cc9575f805f8581526020019081526020015f205f015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff021916908315150217905550611c66611be3565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a460019050611ccd565b5f90505b92915050565b5f80611cde83611502565b90505f8103611cf0575f915050611d1a565b60018103611d02576003915050611d1a565b42811115611d14576001915050611d1a565b60029150505b919050565b7fb09aa5aeb3702cfd50b6b62bc4532604938f21248a27a1d5ca736082b6819cc1611d498161185d565b878790508a8a9050141580611d645750858590508a8a905014155b15611db3578989905086869050898990506040517fffb03211000000000000000000000000000000000000000000000000000000008152600401611daa939291906137ab565b60405180910390fd5b5f611dc48b8b8b8b8b8b8b8b61129e565b9050611dd08184612117565b5f5b8b8b9050811015611e945780827f4cf4410cc57040e44862ef0f45f3dd5a5e02db8eb8add648d4b0e236f1d07dca8e8e85818110611e1357611e12613607565b5b9050602002016020810190611e289190613634565b8d8d86818110611e3b57611e3a613607565b5b905060200201358c8c87818110611e5557611e54613607565b5b9050602002810190611e67919061366b565b8c8b604051611e7b969594939291906136cd565b60405180910390a380611e8d90613522565b9050611dd2565b505f801b8414611ed757807f20fda5fd27a1ea7bf5b9567f143ac5470bb059374a27e8f67cb44f946f6d038785604051611ece919061275d565b60405180910390a25b5050505050505050505050565b5f816003811115611ef857611ef7612aa8565b5b60ff166001901b5f1b9050919050565b7fd8aa0f3194971a2a116679f7c2090f6939c8d4e01a2a8d7e41d55e5351469e63611f33815f6111ed565b611f4957611f4881611f43611be3565b6120c6565b5b8686905089899050141580611f645750848490508989905014155b15611fb3578888905085859050888890506040517fffb03211000000000000000000000000000000000000000000000000000000008152600401611faa939291906137ab565b60405180910390fd5b5f611fc48a8a8a8a8a8a8a8a61129e565b9050611fd08185612281565b5f5b8a8a90508110156120b0575f8b8b83818110611ff157611ff0613607565b5b90506020020160208101906120069190613634565b90505f8a8a8481811061201c5761201b613607565b5b905060200201359050365f8a8a8681811061203a57612039613607565b5b905060200281019061204c919061366b565b9150915061205c848484846119bf565b84867fc2617efa69bab66782fa219543714338489c4e9e178271560a91b82c3f612b5886868686604051612093949392919061376d565b60405180910390a350505050806120a990613522565b9050611fd2565b506120ba81612334565b50505050505050505050565b6120d082826111ed565b6121135780826040517fe2517d3f00000000000000000000000000000000000000000000000000000000815260040161210a9291906137e0565b60405180910390fd5b5050565b61212082610c42565b1561216c578161212f5f611ee4565b6040517f5ead8eb50000000000000000000000000000000000000000000000000000000081526004016121639291906134ce565b60405180910390fd5b5f6121756115b2565b9050808210156121be5781816040517f543366090000000000000000000000000000000000000000000000000000000081526004016121b5929190613155565b60405180910390fd5b81426121ca9190613807565b60015f8581526020019081526020015f2081905550505050565b5f7f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806122565750612255826123a2565b5b9050919050565b6060826122725761226d8261240b565b61227a565b81905061227b565b5b92915050565b61228a82610b7c565b6122d657816122996002611ee4565b6040517f5ead8eb50000000000000000000000000000000000000000000000000000000081526004016122cd9291906134ce565b60405180910390fd5b5f801b81141580156122ee57506122ec81610be3565b155b1561233057806040517f90a9a618000000000000000000000000000000000000000000000000000000008152600401612327919061275d565b60405180910390fd5b5050565b61233d81610b7c565b612389578061234c6002611ee4565b6040517f5ead8eb50000000000000000000000000000000000000000000000000000000081526004016123809291906134ce565b60405180910390fd5b6001805f8381526020019081526020015f208190555050565b5f7f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b5f8151111561241c57805160208201fd5b6040517fd6bda27500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f604051905090565b5f80fd5b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6124888261245f565b9050919050565b6124988161247e565b81146124a2575f80fd5b50565b5f813590506124b38161248f565b92915050565b5f819050919050565b6124cb816124b9565b81146124d5575f80fd5b50565b5f813590506124e6816124c2565b92915050565b5f80fd5b5f80fd5b5f80fd5b5f8083601f84011261250d5761250c6124ec565b5b8235905067ffffffffffffffff81111561252a576125296124f0565b5b602083019150836001820283011115612546576125456124f4565b5b9250929050565b5f819050919050565b61255f8161254d565b8114612569575f80fd5b50565b5f8135905061257a81612556565b92915050565b5f805f805f805f60c0888a03121561259b5761259a612457565b5b5f6125a88a828b016124a5565b97505060206125b98a828b016124d8565b965050604088013567ffffffffffffffff8111156125da576125d961245b565b5b6125e68a828b016124f8565b955095505060606125f98a828b0161256c565b935050608061260a8a828b0161256c565b92505060a061261b8a828b016124d8565b91505092959891949750929550565b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61265e8161262a565b8114612668575f80fd5b50565b5f8135905061267981612655565b92915050565b5f6020828403121561269457612693612457565b5b5f6126a18482850161266b565b91505092915050565b5f8115159050919050565b6126be816126aa565b82525050565b5f6020820190506126d75f8301846126b5565b92915050565b5f805f80606085870312156126f5576126f4612457565b5b5f612702878288016124a5565b9450506020612713878288016124d8565b935050604085013567ffffffffffffffff8111156127345761273361245b565b5b612740878288016124f8565b925092505092959194509250565b6127578161254d565b82525050565b5f6020820190506127705f83018461274e565b92915050565b5f805f805f8060a087890312156127905761278f612457565b5b5f61279d89828a016124a5565b96505060206127ae89828a016124d8565b955050604087013567ffffffffffffffff8111156127cf576127ce61245b565b5b6127db89828a016124f8565b945094505060606127ee89828a0161256c565b92505060806127ff89828a0161256c565b9150509295509295509295565b5f6020828403121561282157612820612457565b5b5f61282e8482850161256c565b91505092915050565b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6128818261283b565b810181811067ffffffffffffffff821117156128a05761289f61284b565b5b80604052505050565b5f6128b261244e565b90506128be8282612878565b919050565b5f67ffffffffffffffff8211156128dd576128dc61284b565b5b6128e68261283b565b9050602081019050919050565b828183375f83830152505050565b5f61291361290e846128c3565b6128a9565b90508281526020810184848401111561292f5761292e612837565b5b61293a8482856128f3565b509392505050565b5f82601f830112612956576129556124ec565b5b8135612966848260208601612901565b91505092915050565b5f805f806080858703121561298757612986612457565b5b5f612994878288016124a5565b94505060206129a5878288016124a5565b93505060406129b6878288016124d8565b925050606085013567ffffffffffffffff8111156129d7576129d661245b565b5b6129e387828801612942565b91505092959194509250565b6129f88161262a565b82525050565b5f602082019050612a115f8301846129ef565b92915050565b5f8060408385031215612a2d57612a2c612457565b5b5f612a3a8582860161256c565b9250506020612a4b858286016124a5565b9150509250929050565b612a5e816124b9565b82525050565b5f602082019050612a775f830184612a55565b92915050565b5f60208284031215612a9257612a91612457565b5b5f612a9f848285016124d8565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b60048110612ae657612ae5612aa8565b5b50565b5f819050612af682612ad5565b919050565b5f612b0582612ae9565b9050919050565b612b1581612afb565b82525050565b5f602082019050612b2e5f830184612b0c565b92915050565b5f8083601f840112612b4957612b486124ec565b5b8235905067ffffffffffffffff811115612b6657612b656124f0565b5b602083019150836020820283011115612b8257612b816124f4565b5b9250929050565b5f8083601f840112612b9e57612b9d6124ec565b5b8235905067ffffffffffffffff811115612bbb57612bba6124f0565b5b602083019150836020820283011115612bd757612bd66124f4565b5b9250929050565b5f8083601f840112612bf357612bf26124ec565b5b8235905067ffffffffffffffff811115612c1057612c0f6124f0565b5b602083019150836020820283011115612c2c57612c2b6124f4565b5b9250929050565b5f805f805f805f805f60c08a8c031215612c5057612c4f612457565b5b5f8a013567ffffffffffffffff811115612c6d57612c6c61245b565b5b612c798c828d01612b34565b995099505060208a013567ffffffffffffffff811115612c9c57612c9b61245b565b5b612ca88c828d01612b89565b975097505060408a013567ffffffffffffffff811115612ccb57612cca61245b565b5b612cd78c828d01612bde565b95509550506060612cea8c828d0161256c565b9350506080612cfb8c828d0161256c565b92505060a0612d0c8c828d016124d8565b9150509295985092959850929598565b5f805f805f805f8060a0898b031215612d3857612d37612457565b5b5f89013567ffffffffffffffff811115612d5557612d5461245b565b5b612d618b828c01612b34565b9850985050602089013567ffffffffffffffff811115612d8457612d8361245b565b5b612d908b828c01612b89565b9650965050604089013567ffffffffffffffff811115612db357612db261245b565b5b612dbf8b828c01612bde565b94509450506060612dd28b828c0161256c565b9250506080612de38b828c0161256c565b9150509295985092959890939650565b5f67ffffffffffffffff821115612e0d57612e0c61284b565b5b602082029050602081019050919050565b5f612e30612e2b84612df3565b6128a9565b90508083825260208201905060208402830185811115612e5357612e526124f4565b5b835b81811015612e7c5780612e6888826124d8565b845260208401935050602081019050612e55565b5050509392505050565b5f82601f830112612e9a57612e996124ec565b5b8135612eaa848260208601612e1e565b91505092915050565b5f805f805f60a08688031215612ecc57612ecb612457565b5b5f612ed9888289016124a5565b9550506020612eea888289016124a5565b945050604086013567ffffffffffffffff811115612f0b57612f0a61245b565b5b612f1788828901612e86565b935050606086013567ffffffffffffffff811115612f3857612f3761245b565b5b612f4488828901612e86565b925050608086013567ffffffffffffffff811115612f6557612f6461245b565b5b612f7188828901612942565b9150509295509295909350565b5f805f805f60a08688031215612f9757612f96612457565b5b5f612fa4888289016124a5565b9550506020612fb5888289016124a5565b9450506040612fc6888289016124d8565b9350506060612fd7888289016124d8565b925050608086013567ffffffffffffffff811115612ff857612ff761245b565b5b61300488828901612942565b9150509295509295909350565b5f805f805f806060878903121561302b5761302a612457565b5b5f87013567ffffffffffffffff8111156130485761304761245b565b5b61305489828a01612b34565b9650965050602087013567ffffffffffffffff8111156130775761307661245b565b5b61308389828a01612b89565b9450945050604087013567ffffffffffffffff8111156130a6576130a561245b565b5b6130b289828a01612bde565b92509250509295509295509295565b6130ca8161247e565b82525050565b5f6020820190506130e35f8301846130c1565b92915050565b5f82825260208201905092915050565b5f61310483856130e9565b93506131118385846128f3565b61311a8361283b565b840190509392505050565b5f6040820190506131385f830186612a55565b818103602083015261314b8184866130f9565b9050949350505050565b5f6040820190506131685f830185612a55565b6131756020830184612a55565b9392505050565b5f60a08201905061318f5f8301896130c1565b61319c6020830188612a55565b81810360408301526131af8186886130f9565b90506131be606083018561274e565b6131cb608083018461274e565b979650505050505050565b5f82825260208201905092915050565b5f819050919050565b6131f88161247e565b82525050565b5f61320983836131ef565b60208301905092915050565b5f61322360208401846124a5565b905092915050565b5f602082019050919050565b5f61324283856131d6565b935061324d826131e6565b805f5b85811015613285576132628284613215565b61326c88826131fe565b97506132778361322b565b925050600181019050613250565b5085925050509392505050565b5f82825260208201905092915050565b5f80fd5b82818337505050565b5f6132ba8385613292565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311156132ed576132ec6132a2565b5b6020830292506132fe8385846132a6565b82840190509392505050565b5f82825260208201905092915050565b5f819050919050565b5f82825260208201905092915050565b5f61333e8385613323565b935061334b8385846128f3565b6133548361283b565b840190509392505050565b5f61336b848484613333565b90509392505050565b5f80fd5b5f80fd5b5f80fd5b5f808335600160200384360303811261339c5761339b61337c565b5b83810192508235915060208301925067ffffffffffffffff8211156133c4576133c3613374565b5b6001820236038313156133da576133d9613378565b5b509250929050565b5f602082019050919050565b5f6133f9838561330a565b93508360208402850161340b8461331a565b805f5b878110156134505784840389526134258284613380565b61343086828461335f565b955061343b846133e2565b935060208b019a50505060018101905061340e565b50829750879450505050509392505050565b5f60a0820190508181035f83015261347b818a8c613237565b9050818103602083015261349081888a6132af565b905081810360408301526134a58186886133ee565b90506134b4606083018561274e565b6134c1608083018461274e565b9998505050505050505050565b5f6040820190506134e15f83018561274e565b6134ee602083018461274e565b9392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61352c826124b9565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361355e5761355d6134f5565b5b600182019050919050565b5f82825260208201905092915050565b7f54696d656c6f636b436f6e74726f6c6c65723a206c656e677468206d69736d615f8201527f7463680000000000000000000000000000000000000000000000000000000000602082015250565b5f6135d3602383613569565b91506135de82613579565b604082019050919050565b5f6020820190508181035f830152613600816135c7565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f6020828403121561364957613648612457565b5b5f613656848285016124a5565b91505092915050565b5f80fd5b5f80fd5b5f80fd5b5f80833560016020038436030381126136875761368661365f565b5b80840192508235915067ffffffffffffffff8211156136a9576136a8613663565b5b6020830192506001820236038313156136c5576136c4613667565b5b509250929050565b5f60a0820190506136e05f8301896130c1565b6136ed6020830188612a55565b81810360408301526137008186886130f9565b905061370f606083018561274e565b61371c6080830184612a55565b979650505050505050565b5f81905092915050565b5f61373c8385613727565b93506137498385846128f3565b82840190509392505050565b5f613761828486613731565b91508190509392505050565b5f6060820190506137805f8301876130c1565b61378d6020830186612a55565b81810360408301526137a08184866130f9565b905095945050505050565b5f6060820190506137be5f830186612a55565b6137cb6020830185612a55565b6137d86040830184612a55565b949350505050565b5f6040820190506137f35f8301856130c1565b613800602083018461274e565b9392505050565b5f613811826124b9565b915061381c836124b9565b9250828201905080821115613834576138336134f5565b5b9291505056fea26469706673582212207c0a3a57441c67e430d28c873f37c46fd440cf9b2dbfadb611f7d741885c8d6a64736f6c63430008140033`; 

const TIMELOCK_VAULT_CONSTRUCTOR_ABI = [
    "constructor(uint256 minDelay, address[] memory proposers, address[] memory executors, address[] memory recoveryTriggerers, address[] memory recoverers)"
];

// Deployment state management
let deploymentInProgress = false;

// Initialize deployment tab
function initializeDeploymentTab() {
    // Add event listeners for dynamic lists
    setupRoleListManagement();
    
    // Add deployment button listener
    const deployButton = document.getElementById('deployTimelockVault');
    if (deployButton) {
        deployButton.addEventListener('click', deployTimelockVault);
    }
    
    // Initialize time inputs with default values
    initializeTimeInputs();
    
    // Update deployment button state based on initial conditions
    updateDeploymentButtonState();
    
    console.log('Deployment tab initialized');
}

// Initialize time inputs and set up validation
function initializeTimeInputs() {
    const timeInputs = ['delayDays', 'delayHours', 'delayMinutes', 'delaySeconds'];
    
    timeInputs.forEach(inputId => {
        const input = document.getElementById(inputId);
        if (input) {
            // Set initial value to 0
            input.value = '0';
            
            // Add input validation
            input.addEventListener('input', validateTimeInput);
            input.addEventListener('blur', normalizeTimeInput);
        }
    });
    
    // Set default to 1 hour (3600 seconds)
    document.getElementById('delayHours').value = '1';
    updateDelayFromTimeInputs();
}

// Validate time input constraints
function validateTimeInput(event) {
    const input = event.target;
    const value = parseInt(input.value) || 0;
    
    // Apply constraints based on input type
    switch (input.id) {
        case 'delayHours':
            if (value > 23) input.value = '23';
            break;
        case 'delayMinutes':
            if (value > 59) input.value = '59';
            break;
        case 'delaySeconds':
            if (value > 59) input.value = '59';
            break;
        case 'delayDays':
            if (value > 999) input.value = '999';
            break;
    }
    
    // Ensure non-negative values
    if (value < 0) input.value = '0';
    
    updateDelayFromTimeInputs();
}

// Normalize time input values on blur
function normalizeTimeInput(event) {
    const input = event.target;
    const value = parseInt(input.value);
    
    // Set to 0 if empty or invalid
    if (isNaN(value) || value < 0) {
        input.value = '0';
        updateDelayFromTimeInputs();
    }
}

// Update total delay from time inputs
function updateDelayFromTimeInputs() {
    const days = parseInt(document.getElementById('delayDays').value) || 0;
    const hours = parseInt(document.getElementById('delayHours').value) || 0;
    const minutes = parseInt(document.getElementById('delayMinutes').value) || 0;
    const seconds = parseInt(document.getElementById('delaySeconds').value) || 0;
    
    // Calculate total seconds
    const totalSeconds = (days * 24 * 60 * 60) + (hours * 60 * 60) + (minutes * 60) + seconds;
    
    // Update hidden input
    const minDelayInput = document.getElementById('minDelay');
    if (minDelayInput) {
        minDelayInput.value = totalSeconds;
    }
    
    // Update display
    const delayDisplay = document.getElementById('delayDisplay');
    if (delayDisplay) {
        delayDisplay.textContent = `Total delay: ${formatDelay(totalSeconds)}`;
    }
    
    // Update deployment button state
    updateDeploymentButtonState();
}

// Format delay for display
function formatDelay(totalSeconds) {
    if (totalSeconds === 0) return '0 seconds';
    
    const days = Math.floor(totalSeconds / (24 * 60 * 60));
    const hours = Math.floor((totalSeconds % (24 * 60 * 60)) / (60 * 60));
    const minutes = Math.floor((totalSeconds % (60 * 60)) / 60);
    const seconds = totalSeconds % 60;
    
    const parts = [];
    if (days > 0) parts.push(`${days} day${days !== 1 ? 's' : ''}`);
    if (hours > 0) parts.push(`${hours} hour${hours !== 1 ? 's' : ''}`);
    if (minutes > 0) parts.push(`${minutes} minute${minutes !== 1 ? 's' : ''}`);
    if (seconds > 0) parts.push(`${seconds} second${seconds !== 1 ? 's' : ''}`);
    
    return parts.join(', ') + ` (${totalSeconds} seconds)`;
}

// Make updateDelayFromTimeInputs available globally
window.updateDelayFromTimeInputs = updateDelayFromTimeInputs;

// Setup dynamic role list management
function setupRoleListManagement() {
    const roleTypes = ['proposers', 'executors', 'cancellers', 'recoveryTriggerers', 'recoverers'];
    
    roleTypes.forEach(roleType => {
        // Add address button
        const addButton = document.getElementById(`add${capitalizeFirst(roleType)}Address`);
        if (addButton) {
            addButton.addEventListener('click', () => addRoleAddress(roleType));
        }
        
        // Enter key support for input fields
        const input = document.getElementById(`new${capitalizeFirst(roleType)}Address`);
        if (input) {
            input.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    addRoleAddress(roleType);
                }
            });
        }
    });
    
    // Special handling for executors "anyone can execute" checkbox
    const anyoneExecuteCheckbox = document.getElementById('anyoneCanExecute');
    if (anyoneExecuteCheckbox) {
        anyoneExecuteCheckbox.addEventListener('change', handleAnyoneCanExecuteChange);
        
        // Initialize the executor list state based on checkbox default value
        handleAnyoneCanExecuteChange();
    }
}

// Handle "anyone can execute" checkbox
function handleAnyoneCanExecuteChange() {
    const checkbox = document.getElementById('anyoneCanExecute');
    const executorsList = document.getElementById('executorsList');
    const executorsInput = document.getElementById('newExecutorsAddress');
    const addExecutorButton = document.getElementById('addExecutorsAddress');
    
    if (checkbox.checked) {
        // Disable executor management and clear list
        executorsInput.disabled = true;
        addExecutorButton.disabled = true;
        executorsList.innerHTML = '<div class="role-item anyone-execute">🔓 Anyone can execute operations (zero address will be used)</div>';
    } else {
        // Enable executor management
        executorsInput.disabled = false;
        addExecutorButton.disabled = false;
        executorsList.innerHTML = '';
    }
    
    // Update deployment button state
    updateDeploymentButtonState();
}

// Add address to role list
function addRoleAddress(roleType) {
    const input = document.getElementById(`new${capitalizeFirst(roleType)}Address`);
    const list = document.getElementById(`${roleType}List`);
    const address = input.value.trim();
    
    if (!address) {
        showDeploymentError(`Please enter a valid address for ${roleType}`);
        return;
    }
    
    if (!ethers.utils.isAddress(address)) {
        showDeploymentError('Invalid address format');
        return;
    }
    
    // Check for duplicates
    const existingAddresses = Array.from(list.querySelectorAll('.role-address')).map(el => el.textContent);
    if (existingAddresses.includes(address)) {
        showDeploymentError('Address already added to this role');
        return;
    }
    
    // Add to list
    const roleItem = document.createElement('div');
    roleItem.className = 'role-item';
    roleItem.innerHTML = `
        <span class="role-address">${address}</span>
        <button class="remove-role-button" onclick="removeRoleAddress(this)" title="Remove address">×</button>
    `;
    
    list.appendChild(roleItem);
    input.value = '';
    
    // Update deployment button state
    updateDeploymentButtonState();
}

// Remove address from role list
function removeRoleAddress(button) {
    button.parentElement.remove();
    updateDeploymentButtonState();
}

// Update deployment button state
function updateDeploymentButtonState() {
    const deployButton = document.getElementById('deployTimelockVault');
    const minDelay = document.getElementById('minDelay').value;
    
    if (!deployButton) return;
    
    // Check minimum delay
    const validMinDelay = minDelay && parseInt(minDelay) > 0;
    
    // Check required roles
    const proposers = collectRoleAddresses('proposersList');
    const recoveryTriggerers = collectRoleAddresses('recoveryTriggerersList');
    const recoverers = collectRoleAddresses('recoverersList');
    
    // Check executors (either "anyone can execute" is checked OR there's at least one executor)
    const anyoneCanExecute = document.getElementById('anyoneCanExecute').checked;
    const executors = collectRoleAddresses('executorsList');
    const hasValidExecutors = anyoneCanExecute || executors.length > 0;
    
    const hasProposers = proposers.length > 0;
    const hasRecoveryTriggerers = recoveryTriggerers.length > 0;
    const hasRecoverers = recoverers.length > 0;
    
    const canDeploy = validMinDelay && hasProposers && hasValidExecutors && hasRecoveryTriggerers && hasRecoverers && !deploymentInProgress;
    
    deployButton.disabled = !canDeploy;
    
    // Update button text to show what's missing
    if (!validMinDelay) {
        deployButton.textContent = 'Set minimum delay to deploy';
    } else if (!hasProposers) {
        deployButton.textContent = 'Add at least 1 proposer to deploy';
    } else if (!hasValidExecutors) {
        deployButton.textContent = 'Check "anyone can execute" or add executor addresses';
    } else if (!hasRecoveryTriggerers) {
        deployButton.textContent = 'Add at least 1 recovery triggerer to deploy';
    } else if (!hasRecoverers) {
        deployButton.textContent = 'Add at least 1 recoverer to deploy';
    } else if (deploymentInProgress) {
        deployButton.textContent = 'Deploying...';
    } else {
        deployButton.textContent = 'Deploy TimelockVault';
    }
}

// Collect deployment parameters
function collectDeploymentParameters() {
    const minDelay = parseInt(document.getElementById('minDelay').value);
    
    // Collect role addresses
    const proposers = collectRoleAddresses('proposersList');
    const cancellers = collectRoleAddresses('cancellersList');
    const recoveryTriggerers = collectRoleAddresses('recoveryTriggerersList');
    const recoverers = collectRoleAddresses('recoverersList');
    
    // Handle executors (special case for "anyone can execute")
    let executors;
    const anyoneCanExecute = document.getElementById('anyoneCanExecute').checked;
    if (anyoneCanExecute) {
        executors = ['0x0000000000000000000000000000000000000000'];
    } else {
        executors = collectRoleAddresses('executorsList');
    }
    
    return {
        minDelay,
        proposers,
        executors,
        cancellers,
        recoveryTriggerers,
        recoverers
    };
}

// Collect addresses from a role list
function collectRoleAddresses(listId) {
    const list = document.getElementById(listId);
    if (!list) return [];
    
    return Array.from(list.querySelectorAll('.role-address')).map(el => el.textContent);
}

// Deploy TimelockVault contract
async function deployTimelockVault() {
    if (!provider) {
        showDeploymentError('Please connect your wallet first');
        return;
    }
    
    if (deploymentInProgress) {
        return;
    }
    
    try {
        deploymentInProgress = true;
        const deployButton = document.getElementById('deployTimelockVault');
        deployButton.disabled = true;
        deployButton.textContent = 'Deploying...';
        
        showDeploymentStatus('Collecting deployment parameters...', 'pending');
        
        const params = collectDeploymentParameters();
        console.log('Deployment parameters:', params);
        
        // Validate parameters
        if (params.minDelay <= 0) {
            throw new Error('Minimum delay must be greater than 0');
        }
        
        if (params.proposers.length === 0) {
            throw new Error('At least one proposer address is required');
        }
        
        // Check executors: either anyone can execute (zero address) or at least one executor
        const anyoneCanExecute = params.executors.length === 1 && params.executors[0] === '0x0000000000000000000000000000000000000000';
        if (!anyoneCanExecute && params.executors.length === 0) {
            throw new Error('Either check "anyone can execute" or provide at least one executor address');
        }
        
        if (params.recoveryTriggerers.length === 0) {
            throw new Error('At least one recovery triggerer address is required');
        }
        
        if (params.recoverers.length === 0) {
            throw new Error('At least one recoverer address is required');
        }
        
        showDeploymentStatus('Preparing contract deployment...', 'pending');
        
        // Deploy the actual contract
        await deployTimelockVaultContract(params);
        
    } catch (error) {
        console.error('Deployment error:', error);
        showDeploymentError(error.message || 'Deployment failed');
    } finally {
        deploymentInProgress = false;
        const deployButton = document.getElementById('deployTimelockVault');
        deployButton.disabled = false;
        deployButton.textContent = 'Deploy TimelockVault';
    }
}

// Deploy TimelockVault contract using actual bytecode
async function deployTimelockVaultContract(params) {
    try {
        showDeploymentStatus('Creating contract factory...', 'pending');
        
        // Create contract factory
        const contractFactory = new ethers.ContractFactory(
            TIMELOCK_VAULT_CONSTRUCTOR_ABI,
            TIMELOCK_VAULT_BYTECODE,
            provider.getSigner()
        );
        
        showDeploymentStatus('Deploying contract... (this may take a few minutes)', 'pending');
        
        // Deploy contract with constructor parameters
        const contract = await contractFactory.deploy(
            params.minDelay,
            params.proposers,
            params.executors,
            params.recoveryTriggerers,
            params.recoverers,
            {
                gasLimit: 6000000 // Set reasonable gas limit
            }
        );
        
        showDeploymentStatus('Waiting for deployment confirmation...', 'pending');
        
        // Wait for deployment to be mined
        const deployedContract = await contract.deployed();
        const contractAddress = deployedContract.address;
        
        showDeploymentStatus(`
            🎉 Deployment Successful!
            
            Contract Address: ${contractAddress}
            Transaction Hash: ${contract.deployTransaction.hash}
            Min Delay: ${params.minDelay} seconds
            Proposers: ${params.proposers.length} addresses
            Executors: ${params.executors.length === 1 && params.executors[0] === '0x0000000000000000000000000000000000000000' ? 'Anyone can execute' : params.executors.length + ' addresses'}
            Cancellers: ${params.cancellers.length} addresses
            Recovery Triggerers: ${params.recoveryTriggerers.length} addresses
            Recoverers: ${params.recoverers.length} addresses
            
            Gas Used: ${contract.deployTransaction.gasLimit?.toString() || 'Unknown'}
            Block Number: ${deployedContract.deployTransaction.blockNumber || 'Pending'}
        `, 'success');
        
        // Show option to connect to deployed contract
        setTimeout(() => {
            if (confirm(`Connect to deployed contract at ${contractAddress}?`)) {
                // Update config and save to localStorage
                window.CONFIG.CONTRACT_ADDRESS = contractAddress;
                if (window.saveContractAddressToStorage) {
                    window.saveContractAddressToStorage(contractAddress);
                }
                
                // Update display
                const contractAddressElement = document.getElementById('contractAddress');
                if (contractAddressElement) {
                    contractAddressElement.textContent = contractAddress;
                }
                
                // Switch to dashboard
                if (window.switchMainTab) {
                    window.switchMainTab('dashboard');
                }
            }
        }, 2000);
        
    } catch (error) {
        console.error('Deployment failed:', error);
        
        let errorMessage = 'Deployment failed: ';
        if (error.code === 'INSUFFICIENT_FUNDS') {
            errorMessage += 'Insufficient funds for deployment. Please ensure you have enough ETH for gas fees.';
        } else if (error.code === 'UNPREDICTABLE_GAS_LIMIT') {
            errorMessage += 'Could not estimate gas. Check your constructor parameters and network connection.';
        } else if (error.message.includes('user rejected')) {
            errorMessage += 'Transaction was rejected by user.';
        } else {
            errorMessage += error.message || 'Unknown error occurred';
        }
        
        throw new Error(errorMessage);
    }
}

// Utility functions
function capitalizeFirst(str) {
    return str.charAt(0).toUpperCase() + str.slice(1);
}

function showDeploymentStatus(message, type) {
    const statusElement = document.getElementById('deploymentStatus');
    if (statusElement) {
        statusElement.textContent = message;
        statusElement.className = `deployment-status ${type}`;
        statusElement.style.display = 'block';
    }
}

function showDeploymentError(message) {
    showDeploymentStatus(message, 'error');
}

// Make functions available globally
window.removeRoleAddress = removeRoleAddress;
window.deployTimelockVault = deployTimelockVault;
window.updateDeploymentButtonState = updateDeploymentButtonState;

// Initialize when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    // Small delay to ensure other scripts are loaded
    setTimeout(initializeDeploymentTab, 100);
});
